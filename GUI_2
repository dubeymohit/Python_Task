# Import the modules
from tkinter import *
from subprocess import Popen, PIPE
import threading


class Application4:
    """ Class to create a GUI application """
    def __init__(self):
        # Create a GUI window object
        self.root = Tk()
        # output to show the output on text
        self.output = None
        # flag for pause check
        self.flag = 0

        # Thread object
        self.process = None

        # first_start to check start button is press first time or second time
        self.first_start = True

        # fh is file handler
        self.fh = None

    def open_csv_file(self):
        """ Open a CSV file """
        file_name = "001"
        file_name = file_name + ".csv"
        file_name = "E:\\gui_application\\" + file_name
        self.fh = open(file_name, "w+")

    def read_csv_file(self):
        """ To read the CSV file """
        line = self.fh.readlines()
        print(line)

    def start_t(self):
        """ To create a thread and run the method which run our second script"""
        self.t = threading.Thread(None, self.run_script)
        self.t.setDaemon(True)
        self.t.start()

    def run_script(self):
        """ To run the second script """
        self.output.delete(0.0, END)

        self.process = Popen([sys.executable, "C:\\Users\\mohit.dubey\\GUI_task"
                             "\\main_script.py"],
                             stderr=PIPE,
                             stdout=PIPE
                             )

        self.p = self.process.poll()
        self.write_date_in_file_and_in_text_box()

    def write_date_in_file_and_in_text_box(self):
        """ To write data in file and in text box"""

        my_list = []

        while True:
            line = self.process.stdout.readline()
            my_list.append(line)

            # for i in range(len(my_list)):
            #    print(str(my_list[i].decode('utf-8')))

            # Write date in CSV file
            self.fh.write(line.decode('utf-8'))

            if line == '' and self.p is not None:
                break

            # Clean the text box after it has filled
            if len(my_list) > 18 and self.flag != 1:
                # Clean the text box
                self.output.delete(0.0, END)

                # Clean the my_list
                my_list.clear()

            # Insert the data in text box
            if self.flag == 0:
                self.output.insert(END, line.decode('utf-8'))

    def start_button_logic(self):
        """ Logic, of start button """

        # Check start is called time or second time, if condition True
        # then called method which create thread
        if self.first_start:
            self.first_start = False

            # Create a CSV file to write and read data
            self.open_csv_file()

            # To create a thread and  call run_script method to run
            # the second script
            self.start_t()

        # Else, just start the printing on text box
        else:
            self.flag = 0
            self.write_date_in_file_and_in_text_box()

    def pause_button_logic(self):
        """ Logic, of pause button """

        # Check script has started before pause it.
        if self.first_start:
            pass

        # else, pause the output in text box
        else:
            self.flag = 1

    def close_window(self):
        """" Close the window and terminate the script """
        # This condition true, is without starting of script, user exit it.
        if self.process is None:
            self.root.destroy()
            exit()

        else:
            self.process.terminate()
            self.root.destroy()
            exit()

    def create_text_box(self):
        """ Create two text box: first for key per minute and
        second for key data"""

        # Create a text box for output
        self.output = Text(self.root, width=140, height=20, wrap=WORD,
                           background="white")
        self.output.place(x=40, y=200)

        # Text box for key per minute
        self.key_per_min = Text(self.root, width=30, height=2, wrap=WORD,
                                background="#FF0")
        self.key_per_min.place(x=550, y=30)

    def create_button(self):
        """ Create 4 buttons: START, PAUSE, OPEN FILE AND EXIT """
        # Create a label
        label = Label(self.root, text="  Key per minute:   ", bg="#FF0",
                           fg="black", font="none 18 bold")
        label.place(x=300, y=30)

        # Add a submit button
        submit_button = Button(self.root, text="START", width=10,
                                    command=self.start_button_logic,
                                    font="none 18 bold")
        submit_button.place(x=250, y=80)

        # Add a submit button
        pause_button = Button(self.root, text="PAUSE", width=10,
                                   command=self.pause_button_logic,
                                   font="none 18 bold")
        pause_button.place(x=480, y=80)

        # Add a submit button
        open_file = Button(self.root, text="OPEN FILE", width=10,
                                command=self.read_csv_file, font="none 18 bold")
        open_file.place(x=700, y=80)

        # Add a submit button
        exit_button = Button(self.root, text="EXIT", width=10,
                                  command=self.close_window,
                                  font="none 18 bold")
        exit_button.place(x=0, y=550)

    def main(self):
        """ Create and Open a GUI window """
        # Set title, color, width*height and icon of Window
        self.root.title("Bitcoin Application")
        self.root.geometry("1200x600")
        self.root.configure(background="blue")  # 33C1FF
        icon = PhotoImage(
            file="C:\\Users\mohit.dubey\Desktop\Bitcoin.com_logo.png")
        self.root.tk.call('wm', 'iconphoto', self.root._w, icon)

        # Call the create_button method
        self.create_button()

        # Call the create_button method
        self.create_text_box()

        # Don't close the window until  user press cross button
        self.root.mainloop()

    def __del__(self):
        """ Close the CSV file """
        self.fh.close()


if __name__ == "__main__":
    obj = Application4()
    obj.main()


